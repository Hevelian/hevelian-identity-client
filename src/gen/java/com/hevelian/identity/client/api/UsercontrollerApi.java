/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.hevelian.identity.client.api;

import com.hevelian.identity.client.ApiCallback;
import com.hevelian.identity.client.ApiClient;
import com.hevelian.identity.client.ApiException;
import com.hevelian.identity.client.ApiResponse;
import com.hevelian.identity.client.Configuration;
import com.hevelian.identity.client.Pair;
import com.hevelian.identity.client.ProgressRequestBody;
import com.hevelian.identity.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.hevelian.identity.client.model.AddRemoveUserRolesRequestDTO;
import com.hevelian.identity.client.model.AddRemoveUsersOfRoleRequestDTO;
import com.hevelian.identity.client.model.RoleRequestDTO;
import com.hevelian.identity.client.model.PrimitiveResultstring;
import com.hevelian.identity.client.model.NewUserRequestDTO;
import com.hevelian.identity.client.model.UserCredentialsRequestDTO;
import com.hevelian.identity.client.model.UserNameRequestDTO;
import com.hevelian.identity.client.model.IterableRole;
import com.hevelian.identity.client.model.IterableUser;
import com.hevelian.identity.client.model.UpdateRoleNameRequestDTO;
import com.hevelian.identity.client.model.UpdateUserRolesRequestDTO;
import com.hevelian.identity.client.model.UpdateUsersOfRoleRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsercontrollerApi {
    private ApiClient apiClient;

    public UsercontrollerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsercontrollerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addRemoveRolesOfUserUsingPOST */
    private com.squareup.okhttp.Call addRemoveRolesOfUserUsingPOSTCall(AddRemoveUserRolesRequestDTO addRemoveUserRolesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addRemoveUserRolesRequest;
        
        // verify the required parameter 'addRemoveUserRolesRequest' is set
        if (addRemoveUserRolesRequest == null) {
            throw new ApiException("Missing the required parameter 'addRemoveUserRolesRequest' when calling addRemoveRolesOfUserUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/addRemoveRolesOfUser".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addRemoveRolesOfUser
     * 
     * @param addRemoveUserRolesRequest addRemoveUserRolesRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRemoveRolesOfUserUsingPOST(AddRemoveUserRolesRequestDTO addRemoveUserRolesRequest) throws ApiException {
        addRemoveRolesOfUserUsingPOSTWithHttpInfo(addRemoveUserRolesRequest);
    }

    /**
     * addRemoveRolesOfUser
     * 
     * @param addRemoveUserRolesRequest addRemoveUserRolesRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRemoveRolesOfUserUsingPOSTWithHttpInfo(AddRemoveUserRolesRequestDTO addRemoveUserRolesRequest) throws ApiException {
        com.squareup.okhttp.Call call = addRemoveRolesOfUserUsingPOSTCall(addRemoveUserRolesRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * addRemoveRolesOfUser (asynchronously)
     * 
     * @param addRemoveUserRolesRequest addRemoveUserRolesRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRemoveRolesOfUserUsingPOSTAsync(AddRemoveUserRolesRequestDTO addRemoveUserRolesRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRemoveRolesOfUserUsingPOSTCall(addRemoveUserRolesRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRemoveUsersOfRoleUsingPOST */
    private com.squareup.okhttp.Call addRemoveUsersOfRoleUsingPOSTCall(AddRemoveUsersOfRoleRequestDTO addRemoveUsersOfRoleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addRemoveUsersOfRoleRequest;
        
        // verify the required parameter 'addRemoveUsersOfRoleRequest' is set
        if (addRemoveUsersOfRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'addRemoveUsersOfRoleRequest' when calling addRemoveUsersOfRoleUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/addRemoveUsersOfRole".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addRemoveUsersOfRole
     * 
     * @param addRemoveUsersOfRoleRequest addRemoveUsersOfRoleRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addRemoveUsersOfRoleUsingPOST(AddRemoveUsersOfRoleRequestDTO addRemoveUsersOfRoleRequest) throws ApiException {
        addRemoveUsersOfRoleUsingPOSTWithHttpInfo(addRemoveUsersOfRoleRequest);
    }

    /**
     * addRemoveUsersOfRole
     * 
     * @param addRemoveUsersOfRoleRequest addRemoveUsersOfRoleRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addRemoveUsersOfRoleUsingPOSTWithHttpInfo(AddRemoveUsersOfRoleRequestDTO addRemoveUsersOfRoleRequest) throws ApiException {
        com.squareup.okhttp.Call call = addRemoveUsersOfRoleUsingPOSTCall(addRemoveUsersOfRoleRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * addRemoveUsersOfRole (asynchronously)
     * 
     * @param addRemoveUsersOfRoleRequest addRemoveUsersOfRoleRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRemoveUsersOfRoleUsingPOSTAsync(AddRemoveUsersOfRoleRequestDTO addRemoveUsersOfRoleRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRemoveUsersOfRoleUsingPOSTCall(addRemoveUsersOfRoleRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRoleUsingPOST */
    private com.squareup.okhttp.Call addRoleUsingPOSTCall(RoleRequestDTO role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = role;
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling addRoleUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/addRole".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addRole
     * 
     * @param role role (required)
     * @return PrimitiveResultstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrimitiveResultstring addRoleUsingPOST(RoleRequestDTO role) throws ApiException {
        ApiResponse<PrimitiveResultstring> resp = addRoleUsingPOSTWithHttpInfo(role);
        return resp.getData();
    }

    /**
     * addRole
     * 
     * @param role role (required)
     * @return ApiResponse&lt;PrimitiveResultstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrimitiveResultstring> addRoleUsingPOSTWithHttpInfo(RoleRequestDTO role) throws ApiException {
        com.squareup.okhttp.Call call = addRoleUsingPOSTCall(role, null, null);
        Type localVarReturnType = new TypeToken<PrimitiveResultstring>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addRole (asynchronously)
     * 
     * @param role role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRoleUsingPOSTAsync(RoleRequestDTO role, final ApiCallback<PrimitiveResultstring> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRoleUsingPOSTCall(role, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrimitiveResultstring>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUserUsingPOST */
    private com.squareup.okhttp.Call addUserUsingPOSTCall(NewUserRequestDTO user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = user;
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling addUserUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/addUser".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * addUser
     * 
     * @param user user (required)
     * @return PrimitiveResultstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrimitiveResultstring addUserUsingPOST(NewUserRequestDTO user) throws ApiException {
        ApiResponse<PrimitiveResultstring> resp = addUserUsingPOSTWithHttpInfo(user);
        return resp.getData();
    }

    /**
     * addUser
     * 
     * @param user user (required)
     * @return ApiResponse&lt;PrimitiveResultstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrimitiveResultstring> addUserUsingPOSTWithHttpInfo(NewUserRequestDTO user) throws ApiException {
        com.squareup.okhttp.Call call = addUserUsingPOSTCall(user, null, null);
        Type localVarReturnType = new TypeToken<PrimitiveResultstring>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * addUser (asynchronously)
     * 
     * @param user user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserUsingPOSTAsync(NewUserRequestDTO user, final ApiCallback<PrimitiveResultstring> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserUsingPOSTCall(user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrimitiveResultstring>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changePasswordUsingPOST1 */
    private com.squareup.okhttp.Call changePasswordUsingPOST1Call(UserCredentialsRequestDTO userCredentials, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userCredentials;
        
        // verify the required parameter 'userCredentials' is set
        if (userCredentials == null) {
            throw new ApiException("Missing the required parameter 'userCredentials' when calling changePasswordUsingPOST1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/changePassword".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * changePassword
     * 
     * @param userCredentials userCredentials (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void changePasswordUsingPOST1(UserCredentialsRequestDTO userCredentials) throws ApiException {
        changePasswordUsingPOST1WithHttpInfo(userCredentials);
    }

    /**
     * changePassword
     * 
     * @param userCredentials userCredentials (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> changePasswordUsingPOST1WithHttpInfo(UserCredentialsRequestDTO userCredentials) throws ApiException {
        com.squareup.okhttp.Call call = changePasswordUsingPOST1Call(userCredentials, null, null);
        return apiClient.execute(call);
    }

    /**
     * changePassword (asynchronously)
     * 
     * @param userCredentials userCredentials (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePasswordUsingPOST1Async(UserCredentialsRequestDTO userCredentials, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePasswordUsingPOST1Call(userCredentials, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRoleUsingPOST */
    private com.squareup.okhttp.Call deleteRoleUsingPOSTCall(RoleRequestDTO role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = role;
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling deleteRoleUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/deleteRole".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * deleteRole
     * 
     * @param role role (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRoleUsingPOST(RoleRequestDTO role) throws ApiException {
        deleteRoleUsingPOSTWithHttpInfo(role);
    }

    /**
     * deleteRole
     * 
     * @param role role (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRoleUsingPOSTWithHttpInfo(RoleRequestDTO role) throws ApiException {
        com.squareup.okhttp.Call call = deleteRoleUsingPOSTCall(role, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteRole (asynchronously)
     * 
     * @param role role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRoleUsingPOSTAsync(RoleRequestDTO role, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRoleUsingPOSTCall(role, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteUserUsingPOST */
    private com.squareup.okhttp.Call deleteUserUsingPOSTCall(UserNameRequestDTO userName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userName;
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling deleteUserUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/deleteUser".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * deleteUser
     * 
     * @param userName userName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserUsingPOST(UserNameRequestDTO userName) throws ApiException {
        deleteUserUsingPOSTWithHttpInfo(userName);
    }

    /**
     * deleteUser
     * 
     * @param userName userName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserUsingPOSTWithHttpInfo(UserNameRequestDTO userName) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserUsingPOSTCall(userName, null, null);
        return apiClient.execute(call);
    }

    /**
     * deleteUser (asynchronously)
     * 
     * @param userName userName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserUsingPOSTAsync(UserNameRequestDTO userName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserUsingPOSTCall(userName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getRolesOfUserUsingPOST */
    private com.squareup.okhttp.Call getRolesOfUserUsingPOSTCall(UserNameRequestDTO userName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userName;
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling getRolesOfUserUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/getRolesOfUser".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getRolesOfUser
     * 
     * @param userName userName (required)
     * @return IterableRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IterableRole getRolesOfUserUsingPOST(UserNameRequestDTO userName) throws ApiException {
        ApiResponse<IterableRole> resp = getRolesOfUserUsingPOSTWithHttpInfo(userName);
        return resp.getData();
    }

    /**
     * getRolesOfUser
     * 
     * @param userName userName (required)
     * @return ApiResponse&lt;IterableRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IterableRole> getRolesOfUserUsingPOSTWithHttpInfo(UserNameRequestDTO userName) throws ApiException {
        com.squareup.okhttp.Call call = getRolesOfUserUsingPOSTCall(userName, null, null);
        Type localVarReturnType = new TypeToken<IterableRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getRolesOfUser (asynchronously)
     * 
     * @param userName userName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRolesOfUserUsingPOSTAsync(UserNameRequestDTO userName, final ApiCallback<IterableRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRolesOfUserUsingPOSTCall(userName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IterableRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsersOfRoleUsingPOST */
    private com.squareup.okhttp.Call getUsersOfRoleUsingPOSTCall(RoleRequestDTO role, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = role;
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling getUsersOfRoleUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/getUsersOfRole".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * getUsersOfRole
     * 
     * @param role role (required)
     * @return IterableUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IterableUser getUsersOfRoleUsingPOST(RoleRequestDTO role) throws ApiException {
        ApiResponse<IterableUser> resp = getUsersOfRoleUsingPOSTWithHttpInfo(role);
        return resp.getData();
    }

    /**
     * getUsersOfRole
     * 
     * @param role role (required)
     * @return ApiResponse&lt;IterableUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IterableUser> getUsersOfRoleUsingPOSTWithHttpInfo(RoleRequestDTO role) throws ApiException {
        com.squareup.okhttp.Call call = getUsersOfRoleUsingPOSTCall(role, null, null);
        Type localVarReturnType = new TypeToken<IterableUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getUsersOfRole (asynchronously)
     * 
     * @param role role (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersOfRoleUsingPOSTAsync(RoleRequestDTO role, final ApiCallback<IterableUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersOfRoleUsingPOSTCall(role, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IterableUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listRolesUsingGET */
    private com.squareup.okhttp.Call listRolesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/UserService/listRoles".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * listRoles
     * 
     * @return IterableRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IterableRole listRolesUsingGET() throws ApiException {
        ApiResponse<IterableRole> resp = listRolesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * listRoles
     * 
     * @return ApiResponse&lt;IterableRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IterableRole> listRolesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listRolesUsingGETCall(null, null);
        Type localVarReturnType = new TypeToken<IterableRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listRoles (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listRolesUsingGETAsync(final ApiCallback<IterableRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listRolesUsingGETCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IterableRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listUsersUsingGET */
    private com.squareup.okhttp.Call listUsersUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/UserService/listUsers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * listUsers
     * 
     * @return IterableUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IterableUser listUsersUsingGET() throws ApiException {
        ApiResponse<IterableUser> resp = listUsersUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * listUsers
     * 
     * @return ApiResponse&lt;IterableUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IterableUser> listUsersUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listUsersUsingGETCall(null, null);
        Type localVarReturnType = new TypeToken<IterableUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * listUsers (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUsersUsingGETAsync(final ApiCallback<IterableUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUsersUsingGETCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IterableUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateRoleNameUsingPOST */
    private com.squareup.okhttp.Call updateRoleNameUsingPOSTCall(UpdateRoleNameRequestDTO updateRoleNameRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateRoleNameRequest;
        
        // verify the required parameter 'updateRoleNameRequest' is set
        if (updateRoleNameRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRoleNameRequest' when calling updateRoleNameUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/updateRoleName".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * updateRoleName
     * 
     * @param updateRoleNameRequest updateRoleNameRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRoleNameUsingPOST(UpdateRoleNameRequestDTO updateRoleNameRequest) throws ApiException {
        updateRoleNameUsingPOSTWithHttpInfo(updateRoleNameRequest);
    }

    /**
     * updateRoleName
     * 
     * @param updateRoleNameRequest updateRoleNameRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRoleNameUsingPOSTWithHttpInfo(UpdateRoleNameRequestDTO updateRoleNameRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateRoleNameUsingPOSTCall(updateRoleNameRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * updateRoleName (asynchronously)
     * 
     * @param updateRoleNameRequest updateRoleNameRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRoleNameUsingPOSTAsync(UpdateRoleNameRequestDTO updateRoleNameRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRoleNameUsingPOSTCall(updateRoleNameRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRolesOfUserUsingPOST */
    private com.squareup.okhttp.Call updateRolesOfUserUsingPOSTCall(UpdateUserRolesRequestDTO updateUserRolesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateUserRolesRequest;
        
        // verify the required parameter 'updateUserRolesRequest' is set
        if (updateUserRolesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRolesRequest' when calling updateRolesOfUserUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/updateRolesOfUser".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * updateRolesOfUser
     * 
     * @param updateUserRolesRequest updateUserRolesRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRolesOfUserUsingPOST(UpdateUserRolesRequestDTO updateUserRolesRequest) throws ApiException {
        updateRolesOfUserUsingPOSTWithHttpInfo(updateUserRolesRequest);
    }

    /**
     * updateRolesOfUser
     * 
     * @param updateUserRolesRequest updateUserRolesRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRolesOfUserUsingPOSTWithHttpInfo(UpdateUserRolesRequestDTO updateUserRolesRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateRolesOfUserUsingPOSTCall(updateUserRolesRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * updateRolesOfUser (asynchronously)
     * 
     * @param updateUserRolesRequest updateUserRolesRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRolesOfUserUsingPOSTAsync(UpdateUserRolesRequestDTO updateUserRolesRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRolesOfUserUsingPOSTCall(updateUserRolesRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUsersOfRoleUsingPOST */
    private com.squareup.okhttp.Call updateUsersOfRoleUsingPOSTCall(UpdateUsersOfRoleRequestDTO updateUsersOfRoleRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateUsersOfRoleRequest;
        
        // verify the required parameter 'updateUsersOfRoleRequest' is set
        if (updateUsersOfRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUsersOfRoleRequest' when calling updateUsersOfRoleUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/UserService/updateUsersOfRole".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * updateUsersOfRole
     * 
     * @param updateUsersOfRoleRequest updateUsersOfRoleRequest (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUsersOfRoleUsingPOST(UpdateUsersOfRoleRequestDTO updateUsersOfRoleRequest) throws ApiException {
        updateUsersOfRoleUsingPOSTWithHttpInfo(updateUsersOfRoleRequest);
    }

    /**
     * updateUsersOfRole
     * 
     * @param updateUsersOfRoleRequest updateUsersOfRoleRequest (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUsersOfRoleUsingPOSTWithHttpInfo(UpdateUsersOfRoleRequestDTO updateUsersOfRoleRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateUsersOfRoleUsingPOSTCall(updateUsersOfRoleRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * updateUsersOfRole (asynchronously)
     * 
     * @param updateUsersOfRoleRequest updateUsersOfRoleRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsersOfRoleUsingPOSTAsync(UpdateUsersOfRoleRequestDTO updateUsersOfRoleRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsersOfRoleUsingPOSTCall(updateUsersOfRoleRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
